// Objective-C API for talking to github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/credentialschema Go package.
//   gobind -lang=objc github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/credentialschema
//
// File is generated by gobind. Do not edit.

#ifndef __Credentialschema_H__
#define __Credentialschema_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Api.objc.h"

@class CredentialschemaCredentials;
@class CredentialschemaResolver;
@class CredentialschemaSchema;

/**
 * Credentials represents the different ways that credentials can be passed in to the Resolve method.
At most one out of VCs and CredentialReader should be used for a given call to Resolve. If both are specified,
then VCs will take precedence. If neither are specified, then the CredentialReader from the constructor (NewResolver)
will be used instead.
Optionally, CredentialID may be specified if only one VC out of VCs or the CredentialReader should be specified.
 */
@interface CredentialschemaCredentials : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * VCs is a JSON array of Verifiable Credentials. If specified, this takes precedence over the CredentialReader
used in the constructor (NewResolver).
 */
@property (nonatomic) NSData* _Nullable vCs;
/**
 * CredentialReader allows for access to a VC storage mechanism. If specified, this takes precedence over the
CredentialReader used in the constructor (NewResolver).
 */
@property (nonatomic) id<ApiCredentialReader> _Nullable credentialReader;
/**
 * CredentialID specifies that only a single credential from VCs or the CredentialReader should be examined.
If not specified, then all credentials from VCs or CredentialReader will be examined.
 */
@property (nonatomic) NSString* _Nonnull credentialID;
@end

/**
 * Resolver can resolve credentials.
 */
@interface CredentialschemaResolver : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewResolver creates a new Resolver.
If a CredentialReader is specified here, then it will be used as the source for VCs in the Resolve method unless a
CredentialReader exists in the ResolveOpts.
 */
- (nullable instancetype)init:(id<ApiCredentialReader> _Nullable)credentialReader;
/**
 * Resolve resolves the given credentials and returns resolved descriptors. See the Schema and Credentials structs
for more information.
Returns a JSON array of resolved descriptors.
 */
- (NSData* _Nullable)resolve:(CredentialschemaSchema* _Nullable)schema credentials:(CredentialschemaCredentials* _Nullable)credentials error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Schema represents the schema options for the Resolve method.
Only one out of Schema and CredentialsSupported should be used for a given call to Resolve. If both are specified,
then Schema will take precedence.
 */
@interface CredentialschemaSchema : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * CredentialManifest is the Credential Manifest to use for resolving descriptors.
 */
@property (nonatomic) NSData* _Nullable credentialManifest;
/**
 * CredentialsSupported is not yet defined (TODO: define).
 */
@property (nonatomic) NSData* _Nullable credentialsSupported;
@end

/**
 * NewResolver creates a new Resolver.
If a CredentialReader is specified here, then it will be used as the source for VCs in the Resolve method unless a
CredentialReader exists in the ResolveOpts.
 */
FOUNDATION_EXPORT CredentialschemaResolver* _Nullable CredentialschemaNewResolver(id<ApiCredentialReader> _Nullable credentialReader);

#endif
