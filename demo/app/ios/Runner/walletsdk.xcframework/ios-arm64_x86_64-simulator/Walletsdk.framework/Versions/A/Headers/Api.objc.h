// Objective-C API for talking to github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/api Go package.
//   gobind -lang=objc github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/api
//
// File is generated by gobind. Do not edit.

#ifndef __Api_H__
#define __Api_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class ApiCreateDIDOpts;
@class ApiKeyHandle;
@protocol ApiActivityLog;
@class ApiActivityLog;
@protocol ApiCredentialReader;
@class ApiCredentialReader;
@protocol ApiCredentialWriter;
@class ApiCredentialWriter;
@protocol ApiCrypto;
@class ApiCrypto;
@protocol ApiDIDCreator;
@class ApiDIDCreator;
@protocol ApiDIDResolver;
@class ApiDIDResolver;
@protocol ApiKeyHandleReader;
@class ApiKeyHandleReader;
@protocol ApiKeyHandleWriter;
@class ApiKeyHandleWriter;

@protocol ApiActivityLog <NSObject>
/**
 * Log logs an activity.
 */
- (void)log:(NSString* _Nullable)message;
@end

@protocol ApiCredentialReader <NSObject>
/**
 * Get retrieves a VC.
 */
- (NSData* _Nullable)get:(NSString* _Nullable)id_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetAll retrieves all VCs.
 */
- (NSData* _Nullable)getAll:(NSError* _Nullable* _Nullable)error;
@end

@protocol ApiCredentialWriter <NSObject>
/**
 * Add adds a VC.
 */
- (BOOL)add:(NSData* _Nullable)vc error:(NSError* _Nullable* _Nullable)error;
/**
 * Remove removes a VC.
 */
- (BOOL)remove:(NSString* _Nullable)id_ error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ApiCrypto <NSObject>
/**
 * Sign will sign msg using a matching signature primitive in kh key handle of a private key
returns:
		signature as []byte
		error in case of errors
 */
- (NSData* _Nullable)sign:(NSData* _Nullable)msg kh:(ApiKeyHandle* _Nullable)kh error:(NSError* _Nullable* _Nullable)error;
/**
 * Verify will verify a signature for the given msg using a matching signature primitive in kh key handle of
a public key
returns:
		error in case of errors or nil if signature verification was successful
 */
- (BOOL)verify:(NSData* _Nullable)signature msg:(NSData* _Nullable)msg kh:(ApiKeyHandle* _Nullable)kh error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ApiDIDCreator <NSObject>
/**
 * Create creates a new DID Document.
It returns a DID Document Resolution.
 */
- (NSData* _Nullable)create:(NSString* _Nullable)method createDIDOpts:(ApiCreateDIDOpts* _Nullable)createDIDOpts error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ApiDIDResolver <NSObject>
/**
 * Resolve resolves a did.
It returns a DID Document Resolution.
 */
- (NSData* _Nullable)resolve:(NSString* _Nullable)did error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ApiKeyHandleReader <NSObject>
/**
 * Export will fetch a key referenced by id then gets its public key in raw bytes and returns it.
The key must be an asymmetric key.
Returns:
 - A key handle, which contains both the key type and public key bytes
 - Error if it fails to export the public key bytes
 */
- (ApiKeyHandle* _Nullable)export:(NSString* _Nullable)keyID error:(NSError* _Nullable* _Nullable)error;
/**
 * GetKeyHandle return the key handle for the given keyID
Returns:
 - The private key handle
 - Error if failure
 */
- (ApiKeyHandle* _Nullable)getKeyHandle:(NSString* _Nullable)keyID error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ApiKeyHandleWriter <NSObject>
/**
 * Create a new key/keyset/key handle of type keyType
Some key types may require additional attributes described in `opts`. // TODO: Format of opts to be determined.
Returns a key handle, which contains both the key ID and actual private key bytes
 */
- (ApiKeyHandle* _Nullable)create:(NSString* _Nullable)keyType opts:(NSString* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
/**
 * Import will import privKey into the KMS storage for the given keyType then returns the new key id and
the newly persisted KeyHandle.
privKey possible types are: *ecdsa.PrivateKey and ed25519.PrivateKey.
TODO: Determine how these restrictions work.
kt possible types are signing key types only (ECDSA keys or Ed25519)
opts allows setting the keysetID of the imported key using WithKeyID() option. If the ID is already used,
then an error is returned. // TODO: Format of opts to be determined.
Returns: a key handle, which contains both the new key ID and actual private key bytes.
An error/exception will be returned/thrown if there is an import failure (key empty, invalid, doesn't match
keyType, unsupported keyType or storing of key failed)
TODO: Consider renaming this method to avoid keyword collision and automatic renaming to _import in Java
 */
- (ApiKeyHandle* _Nullable)import:(ApiKeyHandle* _Nullable)privateKey keyType:(NSString* _Nullable)keyType opts:(NSString* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
/**
 * Rotate a key referenced by keyID and return a new handle of a keyset including old key and
new key of type keyType. It also returns the updated keyID as the first return value
Some key types may require additional attributes described in `opts` // TODO: Format of opts to be determined.
Returns: a key handle, which contains both the new key ID and actual private key bytes
 */
- (ApiKeyHandle* _Nullable)rotate:(NSString* _Nullable)keyType keyID:(NSString* _Nullable)keyID opts:(NSString* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * CreateDIDOpts represents the various options for the DIDCreator.Create method.
 */
@interface ApiCreateDIDOpts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull keyID;
@end

/**
 * KeyHandle represents a key with associated metadata.
 */
@interface ApiKeyHandle : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable key;
@property (nonatomic) NSString* _Nonnull keyType;
@end

@class ApiActivityLog;

@class ApiCredentialReader;

@class ApiCredentialWriter;

@class ApiCrypto;

@class ApiDIDCreator;

@class ApiDIDResolver;

@class ApiKeyHandleReader;

@class ApiKeyHandleWriter;

/**
 * ActivityLog defines logging functionality.
 */
@interface ApiActivityLog : NSObject <goSeqRefInterface, ApiActivityLog> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Log logs an activity.
 */
- (void)log:(NSString* _Nullable)message;
@end

/**
 * A CredentialReader is capable of reading VCs from some underlying storage mechanism.
 */
@interface ApiCredentialReader : NSObject <goSeqRefInterface, ApiCredentialReader> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Get retrieves a VC.
 */
- (NSData* _Nullable)get:(NSString* _Nullable)id_ error:(NSError* _Nullable* _Nullable)error;
/**
 * GetAll retrieves all VCs.
 */
- (NSData* _Nullable)getAll:(NSError* _Nullable* _Nullable)error;
@end

/**
 * A CredentialWriter is capable of writing VCs to some underlying storage mechanism.
 */
@interface ApiCredentialWriter : NSObject <goSeqRefInterface, ApiCredentialWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Add adds a VC.
 */
- (BOOL)add:(NSData* _Nullable)vc error:(NSError* _Nullable* _Nullable)error;
/**
 * Remove removes a VC.
 */
- (BOOL)remove:(NSString* _Nullable)id_ error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Crypto defines useful Crypto operations.
TODO: Define more precisely the input and output formats.
 */
@interface ApiCrypto : NSObject <goSeqRefInterface, ApiCrypto> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Sign will sign msg using a matching signature primitive in kh key handle of a private key
returns:
		signature as []byte
		error in case of errors
 */
- (NSData* _Nullable)sign:(NSData* _Nullable)msg kh:(ApiKeyHandle* _Nullable)kh error:(NSError* _Nullable* _Nullable)error;
/**
 * Verify will verify a signature for the given msg using a matching signature primitive in kh key handle of
a public key
returns:
		error in case of errors or nil if signature verification was successful
 */
- (BOOL)verify:(NSData* _Nullable)signature msg:(NSData* _Nullable)msg kh:(ApiKeyHandle* _Nullable)kh error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * DIDCreator defines the method required for a type to create DID documents.
 */
@interface ApiDIDCreator : NSObject <goSeqRefInterface, ApiDIDCreator> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Create creates a new DID Document.
It returns a DID Document Resolution.
 */
- (NSData* _Nullable)create:(NSString* _Nullable)method createDIDOpts:(ApiCreateDIDOpts* _Nullable)createDIDOpts error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * DIDResolver defines the method required for a type to resolve DIDs.
 */
@interface ApiDIDResolver : NSObject <goSeqRefInterface, ApiDIDResolver> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Resolve resolves a did.
It returns a DID Document Resolution.
 */
- (NSData* _Nullable)resolve:(NSString* _Nullable)did error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * A KeyHandleReader represents a type that is capable of performing certain operations related to reading key data.
 */
@interface ApiKeyHandleReader : NSObject <goSeqRefInterface, ApiKeyHandleReader> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Export will fetch a key referenced by id then gets its public key in raw bytes and returns it.
The key must be an asymmetric key.
Returns:
 - A key handle, which contains both the key type and public key bytes
 - Error if it fails to export the public key bytes
 */
- (ApiKeyHandle* _Nullable)export:(NSString* _Nullable)keyID error:(NSError* _Nullable* _Nullable)error;
/**
 * GetKeyHandle return the key handle for the given keyID
Returns:
 - The private key handle
 - Error if failure
 */
- (ApiKeyHandle* _Nullable)getKeyHandle:(NSString* _Nullable)keyID error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * A KeyHandleWriter represents a type that is capable of performing certain operations related to writing key data.
 */
@interface ApiKeyHandleWriter : NSObject <goSeqRefInterface, ApiKeyHandleWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * Create a new key/keyset/key handle of type keyType
Some key types may require additional attributes described in `opts`. // TODO: Format of opts to be determined.
Returns a key handle, which contains both the key ID and actual private key bytes
 */
- (ApiKeyHandle* _Nullable)create:(NSString* _Nullable)keyType opts:(NSString* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
/**
 * Import will import privKey into the KMS storage for the given keyType then returns the new key id and
the newly persisted KeyHandle.
privKey possible types are: *ecdsa.PrivateKey and ed25519.PrivateKey.
TODO: Determine how these restrictions work.
kt possible types are signing key types only (ECDSA keys or Ed25519)
opts allows setting the keysetID of the imported key using WithKeyID() option. If the ID is already used,
then an error is returned. // TODO: Format of opts to be determined.
Returns: a key handle, which contains both the new key ID and actual private key bytes.
An error/exception will be returned/thrown if there is an import failure (key empty, invalid, doesn't match
keyType, unsupported keyType or storing of key failed)
TODO: Consider renaming this method to avoid keyword collision and automatic renaming to _import in Java
 */
- (ApiKeyHandle* _Nullable)import:(ApiKeyHandle* _Nullable)privateKey keyType:(NSString* _Nullable)keyType opts:(NSString* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
/**
 * Rotate a key referenced by keyID and return a new handle of a keyset including old key and
new key of type keyType. It also returns the updated keyID as the first return value
Some key types may require additional attributes described in `opts` // TODO: Format of opts to be determined.
Returns: a key handle, which contains both the new key ID and actual private key bytes
 */
- (ApiKeyHandle* _Nullable)rotate:(NSString* _Nullable)keyType keyID:(NSString* _Nullable)keyID opts:(NSString* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
@end

#endif
