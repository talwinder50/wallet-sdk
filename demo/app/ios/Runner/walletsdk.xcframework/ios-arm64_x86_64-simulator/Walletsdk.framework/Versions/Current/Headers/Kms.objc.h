// Objective-C API for talking to github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/kms Go package.
//   gobind -lang=objc github.com/trustbloc/wallet-sdk/cmd/wallet-sdk-gomobile/kms
//
// File is generated by gobind. Do not edit.

#ifndef __Kms_H__
#define __Kms_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Api.objc.h"

@class KmsKeyManager;

/**
 * A KeyManager manages key creation, storage, retrieval, and other related functionality.
 */
@interface KmsKeyManager : NSObject <goSeqRefInterface, ApiKeyHandleReader, ApiKeyHandleWriter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewKeyManager returns a new KeyManager instance.
 */
- (nullable instancetype)init;
/**
 * Create a new key/keyset/key handle of type keyType
Some key types may require additional attributes described in `opts`. // TODO: Format of opts to be determined.
Returns a key handle, which contains both the key ID and actual private key bytes.
 */
- (ApiKeyHandle* _Nullable)create:(NSString* _Nullable)keyType opts:(NSString* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
/**
 * Export will fetch a key referenced by id then gets its public key in raw bytes and returns it.
The key must be an asymmetric key.
Returns:
  - A key handle, which contains both the key type and public key bytes.
  - Error if it fails to export the public key bytes.
 */
- (ApiKeyHandle* _Nullable)export:(NSString* _Nullable)keyID error:(NSError* _Nullable* _Nullable)error;
/**
 * GetKeyHandle return the key handle for the given keyID
Returns the private key handle
  - Error if failure.
 */
- (ApiKeyHandle* _Nullable)getKeyHandle:(NSString* _Nullable)keyID error:(NSError* _Nullable* _Nullable)error;
/**
 * Import will import privKey into the KMS storage for the given keyType then returns the new key id and
the newly persisted KeyHandle.
privKey possible types are: *ecdsa.PrivateKey and ed25519.PrivateKey. // TODO: Determine how these restrictions work.
kt possible types are signing key types only (ECDSA keys or Ed25519)
opts allows setting the keysetID of the imported key using WithKeyID() option. If the ID is already used,
then an error is returned. // TODO: Format of opts to be determined.
Returns: a key handle, which contains both the new key ID and actual private key bytes.
An error/exception will be returned/thrown if there is an import failure (key empty, invalid, doesn't match
keyType, unsupported keyType or storing of key failed)
TODO: Consider renaming this method to avoid keyword collision and automatic renaming to _import in Java.
 */
- (ApiKeyHandle* _Nullable)import:(ApiKeyHandle* _Nullable)privateKey keyType:(NSString* _Nullable)keyType opts:(NSString* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
/**
 * Rotate a key referenced by keyID and return a new handle of a keyset including old key and
new key of type keyType. It also returns the updated keyID as the first return value
Some key types may require additional attributes described in `opts` // TODO: Format of opts to be determined.
Returns: a key handle, which contains both the new key ID and actual private key bytes.
 */
- (ApiKeyHandle* _Nullable)rotate:(NSString* _Nullable)keyType keyID:(NSString* _Nullable)keyID opts:(NSString* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * NewKeyManager returns a new KeyManager instance.
 */
FOUNDATION_EXPORT KmsKeyManager* _Nullable KmsNewKeyManager(void);

#endif
